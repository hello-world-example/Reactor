<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Reactor</title>
    <link>https://hello-world-example.github.io/Reactor/</link>
    <description>Recent content in Introduction on Reactor</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://hello-world-example.github.io/Reactor/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Reactor/_sidebar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Reactor/_sidebar/</guid>
      <description> 傻傻分不清 Reactive Streams 规范 CompletableFuture Reactor  操作符 线程调度    </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Reactor/docs/CompletableFuture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Reactor/docs/CompletableFuture/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Reactor/docs/Diff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Reactor/docs/Diff/</guid>
      <description> 傻傻分不清 概念  React： Facebook 开源的前端开发框架，与响应式编程没有关系，与后端没有关系
 Reactive：响应式的； 大多数场景里用来描述响应式编程（Reactive Programming）
 Reactive Streams： 响应式编程规范 http://www.reactive-streams.org/ ，已纳入JDK9
 Reactor： 响应式编程的一种实现，Spring5 采用，遵循Reactive Streams规范
 RxJava：响应式编程的一种实现，Android 采用较多，遵循Reactive Streams规范
 ReactiveX：简称 Rx，是一个编程模型，也是一个组织（http://reactivex.io/），下面有 RxJava/RxJS/Rx.NET 等项目
  对比  八个层面比较 Java 8, RxJava, Reactor Netflix RxJava vs Spring Reactor  Use Reactor 3 if you are allowed to use Java 8+ use RxJava 2 if you are stuck on Java 6+ or need your functions to throw checked exceptions  RxJava vs Reactor  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Reactor/docs/Reactive-Streams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Reactor/docs/Reactive-Streams/</guid>
      <description>Reactive Streams 规范   [英文原文] Reactive Streams [译文原文] JVM平台上的响应式流（Reactive Streams）规范   Reactive Streams 的目的是为 非阻塞背压(backpressure) 的 异步流处理提供标准。目前已被纳入 JDK9。
 The purpose of Reactive Streams is to provide a standard for asynchronous stream processing with non-blocking backpressure.
 最新版本：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.reactivestreams&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;reactive-streams&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 工具包， 包含 测试、示例 等， 保证针对该规范的实现效果是一致的 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.reactivestreams&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;reactive-streams-tck&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.3&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; Goals, Design and Scope 处理流数据，尤其是 数据量无法预知的实时在线数据，在一个异步系统中要求格外小心。最需要关注的问题是资源的消耗需要被小心地控制，避免数据流过快压垮下游服务 ( a fast data source does not overwhelm the stream destination)。异步是必要的，目的是为了并行地使用计算资源，如协调网络上多个主机，或一个机器的多个CPU核。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Reactor/docs/Reactor/Operator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Reactor/docs/Reactor/Operator/</guid>
      <description>操作符  reactor.core.publisher.Flux API 文档
 Static Methods just / fromArray / range / interval Flux.just(1, 2, 3).subscribe(System.out::println); // Flux.just 内部调用 Flux.fromArray Flux.fromArray(new Integer[]{1, 2, 3, 4}).subscribe(System.out::println); // 参数(int start, int count), // 这里生成 1 ~ 10 十个数字 Flux.range(1, 10).subscribe(System.out::println); // 每秒生成一个数字，从 0 开始 Flux.interval(Duration.ofSeconds(1)).subscribe(System.out::println); empty / never / error final CoreSubscriber&amp;lt;Object&amp;gt; coreSubscriber = new CoreSubscriber&amp;lt;Object&amp;gt;() { @Override public void onSubscribe(Subscription s) { System.out.println(s.getClass()); } @Override public void onNext(Object o) { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://hello-world-example.github.io/Reactor/docs/Reactor/Schedulers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hello-world-example.github.io/Reactor/docs/Reactor/Schedulers/</guid>
      <description> 线程调度  reactor.core.scheduler.Schedulers API 文档
  Schedulers.immediate() - 使用当前线程 Schedulers.elastic() - 使用线程池 Schedulers.single() - 单个线程 Schedulers.parallel() - 使用并行处理的线程池（取决于CPU核数) Schedulers.fromExecutorService(Executors.newScheduledThreadPool(5)) - 使用Executor（这个最灵活)  </description>
    </item>
    
  </channel>
</rss>